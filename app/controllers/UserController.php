<?phpuse Phalcon\Forms\Form;use Phalcon\Forms\Element\Text;use Phalcon\Forms\Element\Select;use Phalcon\Paginator\Adapter\Model as PaginatorModel;class UserController extends ControllerBase{    /**     * Список всех сотрудников     *         $this->persistent->name = "Михаил";     */    public function indexAction()    {      $users = Users::treeList();      $test = Users::toSelect(4,12);      $this->view->users = $users;      $this->view->test = $test;    }    /**     * @param $id     * Информация о конкретном сотруднике     */    public function profileAction($id)    {      $users = Users::findFirst($id);      if($users->parent_id > 0)      {          $parent = Users::findFirst($users->parent_id);          $users->parent_id = $this->tag->linkTo(            'user/profile/'.$users->parent_id,            $parent->first_name." "            .$parent->name          );      }      $this->view->user = $users;    }    /**     * Отображает форму создания нового сотрудника     */    public function addAction()    {        $form = new UserForm();        $this->view->form = $form;    }    /**     * Добавляет сотрудника на основе данных, введенных в действии "add"     *     */    public function createAction()    {      if ($this->request->isPost()) {        $data = $this->request->getPost();        if ($data["cancel"] != null)          return $this->response->redirect('/user');          $user = new Users();          $form = new UserForm();          if (!$form->isValid($data, $user))          {            foreach ($form->getMessages() as $message) {              $this->flashSession->error($message);            }            return $this->forward('user/add');          }        if($user->save() == FALSE)        {          foreach ($user->getMessages() as $message) {            $this->flashSession->error($message);          }          return $this->forward('user/add');        }        $user->save();          $this->flashSession->success("Сoтрудник ".$user->name." ".$user->first_name." успешно добавлен");          return $this->response->redirect('/user/profile/' . $user->id);      }    }    /**     * Отображает форму для редактирование существующего сотрудника     */    public function editAction($id)    {        $user = Users::findFirst($id);        $form = new UserForm($user, ['edit' => true]);        $this->view->form = $form;    }    /**     * Изменяет сотрудника на основе данных, введенных в действии "edit"     * if ($form->isValid($this->request->getPost()))     */    public function saveAction()    {        if ($this->request->isPost()) {            $data = $this->request->getPost();            $user = Users::findFirst($data['id']);          if ($data["cancel"] != null)            return $this->response->redirect('/user/profile/' . $user->id);            $form = new UserForm($user, ['edit' => true]);            if ($form->isValid($data))            {                if ($data["save"] != null)                {                  $flag = FALSE;                  $treeList = Users::treeList();                  $this->isChildren($treeList,$user->id,$data['parent_id'],$flag);                  if($flag)                  {                    $children = $this->getChildren($treeList, $user->id);                    for($i = 0; $i < count($children); $i++)                    {                      $us = Users::findFirst($children[$i]);                      $us->parent_id = $user->parent_id;                      $us->update();                    }                  }                  $user->save($data);                }              $this->flashSession->success("Изменения успешно сохранены");                return $this->response->redirect('/user/profile/' . $user->id);            }            else            {              foreach ($form->getMessages() as $message) {                $this->flashSession->error($message);              }                return $this->forward('user/edit/' . $user->id);            }        }    }    /**     * Удаляет существующего сотрудника     */    public function deleteAction($id)    {        $user = Users::findFirst($id);        $data = $this->request->getPost();        if ($data["cancel"] != null)            return $this->response->redirect('/user/profile/'.$id);        elseif($data["delete"] != null)        {          $treeList = Users::treeList();          /**           * Перенос подчиненных, если таковые имеются, на верхний уровень           * для сохранения целостности данных           * Обновление поля parent_id           */          if(!empty($treeList[$user->id]))          {            for($i = 0; $i < count($treeList[$user->id]); $i++)            {              $children = Users::findFirst($treeList[$user->id][$i]['id']);              $children->parent_id = 0;              $children->update();            }          }            $user->delete();            $this->flashSession->success("Сoтрудник ".$user->name." ".$user->first_name." успешно удален");            return $this->response->redirect('/user');        }        else        {            $this->view->id = $id;            $this->view->first_name = $user->first_name;            $this->view->name = $user->name;            $this->view->form = new DeleteForm();        }    }  private function isChildren($users, $userID, $childID, &$flag)  {    if(empty($users[$userID]))      return FALSE;    for($i = 0; $i < count($users[$userID]); $i++)    {      if($users[$userID][$i]['id'] == $childID)        $flag = TRUE;      else        $this->isChildren($users,$users[$userID][$i]['id'],$childID,$flag);    }  }  private function getChildren($users,$userID)  {    $result = [];    for($i = 0; $i < count($users[$userID]); $i++)    {      $result[] = $users[$userID][$i]['id'];    }    return $result;  }}